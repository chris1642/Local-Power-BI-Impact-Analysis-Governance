# Define the base folder and script paths at the beginning of the script
$baseFolderPath = "C:\Power BI Backups"
$localFilesFolderPath = "$baseFolderPath\Local Reports and Models"
$Script1Path = "$baseFolderPath\Config\Report Detail Extract Script.csx"
$Script2Path = "$baseFolderPath\Config\Model Detail Extract Script.csx"
$Script3Path = "$baseFolderPath\Config\Measure Dependency Extract Script.csx"

$TabularEditor2Path = "C:\Program Files (x86)\Tabular Editor\TabularEditor.exe"

# Check and set the execution policy
$currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
if ($currentPolicy -eq 'Restricted' -or $currentPolicy -eq 'Undefined' -or $currentPolicy -eq 'AllSigned') {
    Write-Host "Current execution policy is restrictive: $currentPolicy. Attempting to set to RemoteSigned."
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
    Write-Host "Execution policy set to RemoteSigned."
} else {
    Write-Host "Current execution policy is sufficient: $currentPolicy."
}

# Ensure required modules are installed, and imports them. If import fails, error and exit early
$requiredModules = @( 'ImportExcel', 'MicrosoftPowerBIMgmt' )
foreach ($module in $requiredModules) {
    if( -not (Import-Module $module -PassThru -EA ignore) ) {
       Install-Module -Name $module -Scope CurrentUser -Force
    }

    Import-Module $Module -ErrorAction 'stop' # In the rare case Install-Module fails, you probably want a terminating error
}

# Check for PBI Tools folder and extract if necessary
$PBIToolsFolderPath = Join-Path -Path $baseFolderPath\Config -ChildPath "PBI Tools"
$PBIToolsZipPattern = "pbi-tools*.zip"

if (-not (Test-Path -Path $PBIToolsFolderPath)) {
    # Check if there is any zip file matching the pattern
    $zipFile = Get-ChildItem -Path $baseFolderPath\Config -Filter $PBIToolsZipPattern | Select-Object -First 1
    if ($zipFile) {
        # Create the PBI Tools folder
        New-Item -Path $PBIToolsFolderPath -ItemType Directory -Force
        # Extract the zip file contents into the PBI Tools folder
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFile.FullName, $PBIToolsFolderPath)
        Write-Output "Extracted $($zipFile.Name) to $PBIToolsFolderPath"
    }
}

$ErrorActionPreference = "SilentlyContinue"

# Define the folder path and zip pattern for Tabular Editor
$TabularEditorFolderPath = Join-Path -Path $baseFolderPath\Config -ChildPath "TabularEditor"
$TabularEditorZipPattern = "TabularEditor*.zip"

if (-not (Test-Path -Path $TabularEditorFolderPath)) {
    # Check if there is any zip file matching the pattern
    $zipFile = Get-ChildItem -Path $baseFolderPath\Config -Filter $TabularEditorZipPattern | Select-Object -First 1
    if ($zipFile) {
        # Create the Tabular Editor folder
        New-Item -Path $TabularEditorFolderPath -ItemType Directory -Force
        # Extract the zip file contents into the Tabular Editor folder
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFile.FullName, $TabularEditorFolderPath)
        Write-Output "Extracted $($zipFile.Name) to $TabularEditorFolderPath"
    } else {
        Write-Output "No zip file matching the pattern $TabularEditorZipPattern found in $baseFolderPath\Config"
    }
} else {
    Write-Output "Tabular Editor folder already exists at $TabularEditorFolderPath"
}









#### Start of Report Backup and VOL Extract ####








# Start Tabular Editor process
$p = Start-Process -filePath "$TabularEditor2Path" -Wait -NoNewWindow -PassThru `
       -ArgumentList "`"$baseFolderPath\Config\Blank Model.bim`" -S `"$Script1Path`" -B `"localhost\tabular`" `"MyModel`""

# Define the output Excel file path in the parent folder
$outputExcelFile = Join-Path -Path $baseFolderPath -ChildPath "Report Detail.xlsx"

# Check if the Excel file already exists and delete it if it does
if (Test-Path -Path $outputExcelFile) {
    Remove-Item $outputExcelFile -Force
    $excelExists = $false
} else {
    $excelExists = $false
}


foreach ($txtFile in (Get-ChildItem -Path $localFilesFolderPath -Filter *.txt)) {
    # Get the base name of the file (without extension) for the worksheet name
    $worksheetName = [System.IO.Path]::GetFileNameWithoutExtension($txtFile.FullName)
    
    # Import the TXT file, assuming it's tab-delimited
    $txtData = Get-Content -Path $txtFile.FullName -Encoding UTF8 | ConvertFrom-Csv -Delimiter "`t"

    if ($excelExists) {
        # Append data to the existing Excel file
        $txtData | Export-Excel -Path $outputExcelFile -WorksheetName $worksheetName -AutoNameRange -Append
    } else {
        # Create a new Excel file with the data
        $txtData | Export-Excel -Path $outputExcelFile -WorksheetName $worksheetName -AutoNameRange
        $excelExists = $true
    }
}




# Get only .pbix files in the base folder (not subfolders)
$pbixFiles = Get-ChildItem -Path $localFilesFolderPath -Filter *.pbix -File

foreach ($pbixFile in $pbixFiles) {
    $pbixFilePath = $pbixFile.FullName
    $pbixNameWithoutExtension = [System.IO.Path]::GetFileNameWithoutExtension($pbixFile.Name)
    $extractFolder = Join-Path -Path $localFilesFolderPath -ChildPath "$pbixNameWithoutExtension.extract"
    $bimFinalPath = Join-Path -Path $localFilesFolderPath -ChildPath "$pbixNameWithoutExtension.bim"

    Write-Output "Extracting: $pbixFilePath"
    pbi-tools extract $pbixFilePath -extractFolder $extractFolder -modelSerialization Raw

    Write-Output "Generating .bim file..."
    pbi-tools generate-bim $extractFolder -transforms RemovePBIDataSourceVersion

    $bimGenerated = Get-ChildItem -Path $extractFolder -Filter *.bim -File | Select-Object -First 1
    if ($bimGenerated) {
        Move-Item -Path $bimGenerated.FullName -Destination $bimFinalPath -Force
        Write-Output "Moved .bim to $bimFinalPath"
    } else {
        Write-Warning "No .bim file found in $extractFolder"
    }

    # Clean up extract folder
    if (Test-Path $extractFolder) {
        Remove-Item -Path $extractFolder -Recurse -Force
        Write-Output "Removed extract folder: $extractFolder"
    }
}




#### Start of Model Detail Script Run with Script2Path ####

$bimFiles = Get-ChildItem -Path $localFilesFolderPath -Filter *.bim

foreach ($bimFile in $bimFiles) {
    $bimPath = $bimFile.FullName
    $cleanFileName = [System.IO.Path]::GetFileNameWithoutExtension($bimFile.Name)

    $modelScriptArgs = "`"$bimPath`" -S `"$Script2Path`" -B `"localhost\tabular`" `"MyModel`""
    Start-Process -FilePath "$TabularEditor2Path" -Wait -NoNewWindow -PassThru -ArgumentList $modelScriptArgs
}

Write-Output "First model export and script run completed."

#### Start of PowerShell Combining to Semantic Models Worksheet ####

$outputExcelFile = Join-Path -Path $baseFolderPath -ChildPath "Model Detail.xlsx"

if (Test-Path -Path $outputExcelFile) {
    Remove-Item $outputExcelFile -Force
}

$semanticModelsCsvData = @()

foreach ($csvFile in (Get-ChildItem -Path $localFilesFolderPath -Filter *.csv)) {
    if ($csvFile.Name -notlike "*_MD.csv") {
        $csvData = Import-Csv -Path $csvFile.FullName
        $semanticModelsCsvData += $csvData
    }
}

$semanticModelsCsvData | Export-Excel -Path $outputExcelFile -WorksheetName "Semantic Models" -AutoNameRange

Write-Output "CSV files combined into the 'Semantic Models' worksheet in $outputExcelFile"

#### Start of Model Detail Script Run with Script3Path ####

foreach ($bimFile in $bimFiles) {
    $bimPath = $bimFile.FullName
    $cleanFileName = [System.IO.Path]::GetFileNameWithoutExtension($bimFile.Name)

    $modelScriptArgs = "`"$bimPath`" -S `"$Script3Path`" -B `"localhost\tabular`" `"MyModel`""
    Start-Process -FilePath "$TabularEditor2Path" -Wait -NoNewWindow -PassThru -ArgumentList $modelScriptArgs
}

Write-Output "Second model export and script run completed."

#### Start of PowerShell Combining to Measure Dependencies Worksheet ####

$measureDependenciesCsvData = @()

foreach ($csvFile in (Get-ChildItem -Path $localFilesFolderPath  -Filter *_MD.csv)) {
    $csvData = Import-Csv -Path $csvFile.FullName
    $measureDependenciesCsvData += $csvData
}

$measureDependenciesCsvData | Export-Excel -Path $outputExcelFile -WorksheetName "Measure Dependencies" -AutoNameRange -Append

Write-Output "CSV files combined into the 'Measure Dependencies' worksheet in $outputExcelFile"


 # Define the Script Outputs folder
$scriptOutputsFolder = Join-Path -Path $localFilesFolderPath -ChildPath "Script Outputs"

# Create the folder if it doesn't exist
if (-not (Test-Path -Path $scriptOutputsFolder)) {
    New-Item -Path $scriptOutputsFolder -ItemType Directory | Out-Null
    Write-Output "Created folder: $scriptOutputsFolder"
}

# Define file extensions to move
$fileExtensions = @("*.txt", "*.csv", "*.bim")

# Move each file type
foreach ($ext in $fileExtensions) {
    $filesToMove = Get-ChildItem -Path $localFilesFolderPath -Filter $ext -File
    foreach ($file in $filesToMove) {
        $destinationPath = Join-Path -Path $scriptOutputsFolder -ChildPath $file.Name
        Move-Item -Path $file.FullName -Destination $destinationPath -Force
    }
}
 
